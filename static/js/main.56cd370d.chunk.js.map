{"version":3,"sources":["logo.svg","Components/ToDoItem.js","Components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ToDoItem","_React$Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","react_default","a","createElement","index","className","lastItem","type","onClick","deleteHandler","React","Component","Todolist","_this","state","items","itemsNum","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","itemsArray","splice","length","alert","push","preventDefault","_this2","elementArray","map","item","ToDoItem_ToDoItem","dlt","id","onSubmit","onChange","placeholder","renderList","App","Todolist_Todolist","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56cd370d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport {Todolist} from \"./Todolist\";\n\nexport class ToDoItem extends React.Component{\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        return (\n            <div key={this.props.index} className={this.props.lastItem ? 'lastItem' : 'items'}>\n                <div className=\"minusContainer\">\n                    <p className=\"minus\">-</p>\n                </div>\n                <div className=\"contentContainer\">\n                    <p className=\"item\">{this.props.value}</p>\n                </div>\n                <div className=\"dlt\">\n                    <button type=\"button\" onClick={this.props.deleteHandler} className='dltButton'>delete</button>\n                </div>\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport {ToDoItem} from \"./ToDoItem\";\n\nexport class Todolist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            items: [],\n            itemsNum: 0\n\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        const value = this.state.value;\n        const listArray = this.state.items;\n\n        this.setState({\n            value: event.target.value,\n        })\n    }\n\n    dlt(index) {\n        const itemsArray = this.state.items;\n        itemsArray.splice(index, 1);\n        this.setState({\n            items: itemsArray,\n        });\n    }\n\n    handleSubmit(event) {\n        const value = this.state.value;\n        const itemsArray = this.state.items;\n\n        if (value.length == 0) {\n            alert(\"write bitch\")\n        } else {\n            itemsArray.push(this.state.value);\n            this.setState({\n                value: '',\n                items: itemsArray,\n                itemsNum: itemsArray.length\n            });\n        }\n        event.preventDefault();\n    }\n\n    renderList(){\n        let itemsArray = this.state.items;\n        const elementArray = [];\n\n        itemsArray.map((item, index)=>{\n            if(index === itemsArray.length - 1){\n                elementArray.push(\n                    <ToDoItem key={index} value={item} index={index} deleteHandler={this.dlt.bind(this, index)} lastItem={true}/>\n                );\n            } else {\n                elementArray.push(\n                    <ToDoItem key={index} value={item} index={index} deleteHandler={this.dlt.bind(this, index)} lastItem={false}/>\n                );\n            }\n        });\n        return elementArray;\n    }\n\n    render() {\n        return (\n            <div className='background-container container'>\n                <h1 id='h1'>To Do List</h1>\n                <form onSubmit={this.handleSubmit} id='form'>\n                    <label>\n                        Just Do It:\n                        <input id='inputField' type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder='Enter items'/>\n                    </label>\n                    <input type=\"submit\" value={\"Enter\"}/>\n                    <div>\n                        {this.renderList()}\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport {Todolist} from './Components/Todolist'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n     <Todolist/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}